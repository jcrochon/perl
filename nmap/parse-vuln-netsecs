#!/usr/bin/perl

 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#                                                                                       #
#   Jason C. Rochon                                                                     #
#   Mar 13, 2015                                                                        #
#                                                                                       #
#    Notes:                                                                             #
#        1.) cron job: weekly from gateway-2                                            #
#                                                                                       #
#        2.) Searches for vulnerable machines via nmap and reports:                     #
#              A.) Hostname                                                             #
#              B.) IP                                                                   #
#              C.) MAC                                                                  #
#              D.) Vulnerability                                                        #
#                                                                                       #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

#use strict;
#use warnings;
#use Data::Dumper::Simple;

use Getopt::Std;
use Nmap::Parser;


 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#   Parse File                                                                          #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

my $np     = new Nmap::Parser;
my $infile = $ARGV[0];
$np->parsefile($infile);


 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#   Vulnerability Data                                                                  #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

our ( @hb_zones, @ec_zones, @pd_zones );
for my $host ( $np->all_hosts ) {
    my @vulnports =
        qw( 21 25 110 143 443 465 563 587 636 989 990 991 992 993 994 995
        5061 5222 7801 7802 7900 7901 7902 7903 7904 7905 7906 7907 7908
        7909 7910 7911 7912 7913 7914 7915 7916 7917 7918 7919 7920 );

    foreach my $vport (@vulnports) {
        my $svc_ssl_hb =
            $host->tcp_service($vport)->scripts('ssl-heartbleed');

        if ( defined $svc_ssl_hb->{output} ) {
            if ( $svc_ssl_hb->{output} =~ /VULN/ ) {
                my $hb_zone =
                    (     $host->hostname . "\t"
                        . $host->ipv4_addr . "\t"
                        . $host->mac_addr
                        . "\tPort $vport: OpenSSL HeartBleed Vulnerable\n" );

                push( @hb_zones, $hb_zone );
                last;
            }
        }

        my $svc_ssl_pd = $host->tcp_service(443)->scripts('ssl-poodle');

        if ( defined $svc_ssl_pd->{output} ) {
            if ( defined $svc_ssl_pd->{output} =~ /VULN/ ) {
                my $pd_zone =
                    (     $host->hostname . "\t"
                        . $host->ipv4_addr . "\t"
                        . $host->mac_addr
                        . "\tPort 443: SSLv3 POODLE Vulnerable\n" );

                push( @pd_zones, $pd_zone );
                last;
            }
        }

#    else
#    {
#      foreach my $vport (@vulnports)
#      {
#        my $svc_ssl_ec = $host->tcp_service($vport)->scripts('ssl-enum-ciphers');
#
#        #print Dumper ($svc_ssl_ec);
#
#        if ( defined $svc_ssl_ec->{output} )
#        {
#          if (     ( $svc_ssl_ec->{output} =~ /SSLv3:/ )
#               and ( $svc_ssl_ec->{output} !~ /SSLv3: No supported ciphers found/ ) )
#          {
#            my $ec_zone =
#              ( $host->hostname . "\t" . $host->ipv4_addr . "\t" . $host->mac_addr . "\tPort $vport: SSLv3 POODLE Vulnerable\n" );
#
#            push( @ec_zones, $ec_zone );
#            last;
#          }
#        }
#      }
#    }
    }
}


 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#   Sort Files                                                                          #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

my @new_hb_zones = sort {
       ( $a =~ /.*\.(.*\.uic\.edu) *./ )[0]
    cmp( $b =~ /.*\.(.*\.uic\.edu) *./ )[0]
} @hb_zones;

#my @merged = ( @pd_zones, @ec_zones );
#my @new_pd_zones = sort { ( $a =~ /.*\.(.*\.uic\.edu) *./ )[0] cmp( $b =~ /.*\.(.*\.uic\.edu) *./ )[0] } @merged;
my @new_pd_zones = sort {
       ( $a =~ /.*\.(.*\.uic\.edu) *./ )[0]
    cmp( $b =~ /.*\.(.*\.uic\.edu) *./ )[0]
} @pd_zones;


 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#   Session Data                                                                        #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

my $si = $np->get_session;

print "OpenSSL Heartbleed Vulnerable (CVE-2014-0160)\n"
    . "Machines Online between "
    . $si->start_str . " and "
    . $si->time_str . "\n";

&print_netsecs( \@new_hb_zones );

print "\n\nSSLv3 POODLE Vulnerable (CVE-2014-3566)\n"
    . "Machines Online between "
    . $si->start_str . " and "
    . $si->time_str . "\n";

&print_netsecs( \@new_pd_zones );


 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#   Priming DB2 Access                                                                  #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

my %pbopt;
use UIC::Paw;

BEGIN {
    %pbopt = (
        DB2 => {
            TBCREATOR => 'pb',
            DATABASE  => 'ACCCDATA',
            USER      => 'webpbrw',
            PASSWD    => UIC::Paw::get('webpbrw@rabbit'),
        }
    );
}

use UIC::MQ::BasicClients;
use PBUIC   (%pbopt);
use UIC::PW (%pbopt);


 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#   Query Who To CC                                                                     #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

my ( $z, $t );

sub who_cc {
    $z = shift;
    $t = shift;

    my $ps = PersonSet->fill(
        -LIAISON_TYPE   => $t,
        -ZONE_2_LIAISON => $z,
    );

    my @people = $ps->getPersistents;

    foreach my $p (@people) {
        push( @$cc, $p->pnetid . '@uic.edu' );
    }
    $cc = join( ';', @$cc );
    return ($cc);
}


 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#   Print Netsecs                                                                       #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

sub print_netsecs {
    my $zones   = shift;
    my $oldzone = '';
    
    foreach (@$zones) {
        my $zone = $1 if ( $_ =~ /.*\.(.*\.uic\.edu).*/ );
        my $currzone = $zone;
        
        unless ( $oldzone eq $currzone ) {
            print "\n"
                . "\n  Zone: $zone"
                . "\nNetsec: " . &who_cc( $zone, NETSEC )
                . "\n Reach: " . &who_cc( $zone, REACH )
                . "\n  UISO: " . &who_cc( $zone, UISO ) 
                . "\n";
        }
        
        print "\n$&";    # all info
        
        $oldzone = $currzone;
    }
    
    print "\n";
}


 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#   Exit Routine                                                                        #
 # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

print "\n\n";
exit;

